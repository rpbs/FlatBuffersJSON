// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersModels
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DataTypeTest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_1_24(); }
  public static DataTypeTest GetRootAsDataTypeTest(ByteBuffer _bb) { return GetRootAsDataTypeTest(_bb, new DataTypeTest()); }
  public static DataTypeTest GetRootAsDataTypeTest(ByteBuffer _bb, DataTypeTest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataTypeTest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public sbyte BinaryData(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int BinaryDataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetBinaryDataBytes() { return __p.__vector_as_span<sbyte>(6, 1); }
#else
  public ArraySegment<byte>? GetBinaryDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public sbyte[] GetBinaryDataArray() { return __p.__vector_as_array<sbyte>(6); }
  public string JsonData { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJsonDataBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetJsonDataBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetJsonDataArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<FlatBuffersModels.DataTypeTest> CreateDataTypeTest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      VectorOffset binary_dataOffset = default(VectorOffset),
      StringOffset json_dataOffset = default(StringOffset)) {
    builder.StartTable(3);
    DataTypeTest.AddJsonData(builder, json_dataOffset);
    DataTypeTest.AddBinaryData(builder, binary_dataOffset);
    DataTypeTest.AddId(builder, idOffset);
    return DataTypeTest.EndDataTypeTest(builder);
  }

  public static void StartDataTypeTest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddBinaryData(FlatBufferBuilder builder, VectorOffset binaryDataOffset) { builder.AddOffset(1, binaryDataOffset.Value, 0); }
  public static VectorOffset CreateBinaryDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBinaryDataVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBinaryDataVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBinaryDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBinaryDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddJsonData(FlatBufferBuilder builder, StringOffset jsonDataOffset) { builder.AddOffset(2, jsonDataOffset.Value, 0); }
  public static Offset<FlatBuffersModels.DataTypeTest> EndDataTypeTest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffersModels.DataTypeTest>(o);
  }
}


static public class DataTypeTestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*BinaryData*/, 1 /*sbyte*/, false)
      && verifier.VerifyString(tablePos, 8 /*JsonData*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
